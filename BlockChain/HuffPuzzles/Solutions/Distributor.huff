 
/** 
 *  DISTRIBUTE HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `distribute(address[])` to
 *  distribute the value sent with the call to each address in the address array as evenly.
 *  Revert if array length is 0
 *  Assume that array length would always be less than or equal to msg.value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function distribute(address[]) payable returns()


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(distribute) eq distribute jumpi

    end:
    revert

    distribute:
    0x24 calldataload 
    0x00 eq end jumpi
    0x24 calldataload callvalue div 0x00 mstore // value to send to each address
    0x44 0x20 mstore // offset of the first value - 0x20 that will be added later on
    0x24 calldataload 0x40 mstore // length of the array
    loop:
    0x40 mload
    dup1
    0x00 eq finish jumpi
    0x01 swap1 sub
    0x40 mstore // length is updated and checked for 0

    0x00
    0x00
    0x00
    0x00 // [00,00,00,00]
    0x00 mload // [value,00,00,00,00]
    0x20 mload calldataload // [address,value,00,00,00,00]
    gas // [gas,address,value,00,00,00,00]
    call // called on each address
    0x20 mload 0x20 add 0x20 mstore // [offset] --> [offset + 32] --> stored in memory at 0x20 location
    loop jump
    finish:
    0x20 0x00 return
}